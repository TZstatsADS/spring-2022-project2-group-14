ylab("Death Count") +
theme_bw()
ggplotly(c3)
c4 <- COVID_Daily_Cases %>%
ggplot(aes(DATE_OF_INTEREST, CASE_COUNT_7DAY_AVG)) +
geom_line(color="#69b3a2") +
xlab("Date") +
ylab("7-Day Average Count") +
theme_bw()
ggplotly(c4)
Hate_Crimes$`Record Create Date` <- as.Date(Hate_Crimes$`Record Create Date`, format = "%m/%d/%Y")
hc1 <- Hate_Crimes %>%
select(`Record Create Date`, `Full Complaint ID`) %>%
group_by(`Record Create Date`) %>%
summarise(count = length(`Full Complaint ID`))
Hate_Crimes %>%
select("Record Create Date", "Full Complaint ID") %>%
group_by(`Record Create Date`) %>%
summarise(count = length(`Full Complaint ID`)) %>%
arrange(desc(count))
h1 <- Hate_Crimes %>%
select(`Record Create Date`, `Full Complaint ID`) %>%
group_by(`Record Create Date`) %>%
summarise(count = length(`Full Complaint ID`)) %>%
ggplot(aes(`Record Create Date`, count)) +
geom_line(color="#69b3a2") +
xlab("Date") +
ylab("Hate Crime Cases Count") +
theme_bw()
ggplotly(h1)
crime <- Hate_Crimes %>%
select(`Record Create Date`, `Bias Motive Description`, `Full Complaint ID`) %>%
group_by(`Record Create Date`,`Bias Motive Description`) %>%
summarise(n = length(`Full Complaint ID`))
cp1 <- ggplot() +
geom_line(data = COVID_Daily_Cases, aes(x = DATE_OF_INTEREST, y = CASE_COUNT), color="#69b3a2") +
geom_line(data=hc1, aes(x=`Record Create Date`, y=count), color='red') +
scale_y_continuous(name = "COVID Cases", sec.axis = sec_axis(~./1000, name = "Crime Cases"))
ggplotly(cp1)
cp2 <- ggplot() +
geom_line(data=COVID_Daily_Cases, aes(x=DATE_OF_INTEREST, y=CASE_COUNT), color="#69b3a2") +
scale_y_continuous(expand = c(0,0),limits = c(0,13),
sec.axis = sec_axis(~./1000, name = 'Crime Case', breaks = seq(0,13,1)))+
geom_line(data=hc1, aes(x=`Record Create Date`, y=count), color='red')
ggplotly(cp2)
library(patchwork)
c1+h1
p <- ggplot(COVID_Daily_Cases,aes(x=DATE_OF_INTEREST,y=CASE_COUNT))+
geom_line(color="blue") +
xlab("Date") +
ylab("COVID Cases Count") +
theme_bw()
p1 = p +
ylim(0,50000)+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank(),
panel.background=element_blank(),
legend.position="top")
p2_1 <- ggplot(hc1, aes(x = `Record Create Date`, y = count)) +
geom_line(color="#69b3a2")
p2 <- p2_1+
ylim(1,max(hc1$count))+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank(),
panel.background=element_blank(),
axis.text.x=element_blank(),
axis.title.x =element_blank(),
axis.title.y =element_blank())%+replace%
theme(panel.background = element_rect(fill = NA))
# gtable
g1 <- ggplot_gtable(ggplot_build(p1))
g2 <- ggplot_gtable(ggplot_build(p2))
# overlap
pp <- c(subset(g1$layout, name == "panel", se = t:r))
g <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]],
pp$t,pp$l, pp$b, pp$l)
grid.newpage()
library(plotrix)
twoord.plot(lx = COVID_Daily_Cases$DATE_OF_INTEREST, ly = COVID_Daily_Cases$CASE_COUNT,
rx = hc1$`Record Create Date`, ry = hc1$count,
main = 'Cases', xlab = 'Date', ylab = 'Covid Cases',
rylab = 'Crime Cases', type = c('line','line'))
linechart <- function(data1, data2){
p <- ggplot(data1,aes(x=DATE_OF_INTEREST,y=CASE_COUNT))+
geom_line(color="blue") +
xlab("Date") +
ylab("COVID Cases Count") +
theme_bw()
p1 <- p +
ylim(0,50000)+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank(),
panel.background=element_blank(),
legend.position="top")
p2_1 <- ggplot(data2, aes(x = `Record Create Date`, y = count)) +
geom_line(color="#69b3a2")
p2 <- p2_1+
ylim(1,max(data2$count))+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank(),
panel.background=element_blank(),
axis.text.x=element_blank(),
axis.title.x =element_blank(),
axis.title.y =element_blank())%+replace%
theme(panel.background = element_rect(fill = NA))
# gtable
g1 <- ggplot_gtable(ggplot_build(p1))
g2 <- ggplot_gtable(ggplot_build(p2))
# overlap
pp <- c(subset(g1$layout, name == "panel", se = t:r))
g <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]],
pp$t,pp$l, pp$b, pp$l)
grid.newpage()
#axis tweaks
ia <- which(g2$layout$name == "axis-l")
ga <- g2$grobs[[ia]]
ax <- ga$children[[2]]
ax$widths <- rev(ax$widths)
ax$grobs <- rev(ax$grobs)
ax$grobs[[1]]$x <- ax$grobs[[1]]$x - unit(1, "npc") + unit(0.15, "cm")
g <- gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths))
g <- gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b)
grid.newpage()
grid.draw(g)
}
linechart(COVID_Daily_Cases, hc1)
hc_b <- Hate_Crimes %>%
select(`Record Create Date`, `Bias Motive Description`, `Full Complaint ID`) %>%
group_by(`Record Create Date`, `Bias Motive Description`) %>%
summarise(count = length(`Full Complaint ID`)) %>%
arrange(desc(count))
linechart(COVID_Daily_Cases, subset(hc_b, `Bias Motive Description` == "ANTI-MALE HOMOSEXUAL (GAY)"))
knitr::opts_chunk$set(echo = TRUE)
library("tidyverse")
library("leaflet")
library("readr")
library("ggplot2")
library("dplyr")
library("plotly")
library("gtable")
p <- ggplot(COVID_Daily_Cases,aes(x=DATE_OF_INTEREST,y=CASE_COUNT))+
geom_line(color="blue") +
xlab("Date") +
ylab("COVID Cases Count") +
theme_bw()
p1 = p +
ylim(0,50000)+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank(),
panel.background=element_blank(),
legend.position="top")
p2_1 <- ggplot(hc1, aes(x = `Record Create Date`, y = count)) +
geom_line(color="#69b3a2")
p2 <- p2_1+
ylim(1,max(hc1$count))+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank(),
panel.background=element_blank(),
axis.text.x=element_blank(),
axis.title.x =element_blank(),
axis.title.y =element_blank())%+replace%
theme(panel.background = element_rect(fill = NA))
# gtable
g1 <- ggplot_gtable(ggplot_build(p1))
g2 <- ggplot_gtable(ggplot_build(p2))
# overlap
pp <- c(subset(g1$layout, name == "panel", se = t:r))
g <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]],
pp$t,pp$l, pp$b, pp$l)
grid.newpage()
library(grid)
p <- ggplot(COVID_Daily_Cases,aes(x=DATE_OF_INTEREST,y=CASE_COUNT))+
geom_line(color="blue") +
xlab("Date") +
ylab("COVID Cases Count") +
theme_bw()
p1 = p +
ylim(0,50000)+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank(),
panel.background=element_blank(),
legend.position="top")
p2_1 <- ggplot(hc1, aes(x = `Record Create Date`, y = count)) +
geom_line(color="#69b3a2")
p2 <- p2_1+
ylim(1,max(hc1$count))+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank(),
panel.background=element_blank(),
axis.text.x=element_blank(),
axis.title.x =element_blank(),
axis.title.y =element_blank())%+replace%
theme(panel.background = element_rect(fill = NA))
# gtable
g1 <- ggplot_gtable(ggplot_build(p1))
g2 <- ggplot_gtable(ggplot_build(p2))
# overlap
pp <- c(subset(g1$layout, name == "panel", se = t:r))
g <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]],
pp$t,pp$l, pp$b, pp$l)
grid.newpage()
#axis tweaks
ia <- which(g2$layout$name == "axis-l")
ga <- g2$grobs[[ia]]
ax <- ga$children[[2]]
ax$widths <- rev(ax$widths)
ax$grobs <- rev(ax$grobs)
ax$grobs[[1]]$x <- ax$grobs[[1]]$x - unit(1, "npc") + unit(0.15, "cm")
g <- gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths))
g <- gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b)
grid.newpage()
grid.draw(g)
linechart <- function(data1, data2){
p <- ggplot(data1,aes(x=DATE_OF_INTEREST,y=CASE_COUNT))+
geom_line(color="blue") +
xlab("Date") +
ylab("COVID Cases Count") +
theme_bw()
p1 <- p +
ylim(0,50000)+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank(),
panel.background=element_blank(),
legend.position="top")
p2_1 <- ggplot(data2, aes(x = `Record Create Date`, y = count)) +
geom_line(color="#69b3a2")
p2 <- p2_1+
ylim(1,max(data2$count))+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank(),
panel.background=element_blank(),
axis.text.x=element_blank(),
axis.title.x =element_blank(),
axis.title.y =element_blank())%+replace%
theme(panel.background = element_rect(fill = NA))
# gtable
g1 <- ggplot_gtable(ggplot_build(p1))
g2 <- ggplot_gtable(ggplot_build(p2))
# overlap
pp <- c(subset(g1$layout, name == "panel", se = t:r))
g <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]],
pp$t,pp$l, pp$b, pp$l)
grid.newpage()
#axis tweaks
ia <- which(g2$layout$name == "axis-l")
ga <- g2$grobs[[ia]]
ax <- ga$children[[2]]
ax$widths <- rev(ax$widths)
ax$grobs <- rev(ax$grobs)
ax$grobs[[1]]$x <- ax$grobs[[1]]$x - unit(1, "npc") + unit(0.15, "cm")
g <- gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths))
g <- gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b)
grid.newpage()
grid.draw(g)
}
linechart(COVID_Daily_Cases, hc1)
hc_b <- Hate_Crimes %>%
select(`Record Create Date`, `Bias Motive Description`, `Full Complaint ID`) %>%
group_by(`Record Create Date`, `Bias Motive Description`) %>%
summarise(count = length(`Full Complaint ID`)) %>%
arrange(desc(count))
linechart(COVID_Daily_Cases, subset(hc_b, `Bias Motive Description` == "ANTI-MALE HOMOSEXUAL (GAY)"))
runApp('Desktop/Classes_Spring_22/APPLIED_DATA_SCIENCE/projects/project2/spring-2022-project2-group-14/app')
runApp('Desktop/Classes_Spring_22/APPLIED_DATA_SCIENCE/projects/project2/spring-2022-project2-group-14/app')
runApp('Desktop/Classes_Spring_22/APPLIED_DATA_SCIENCE/projects/project2/spring-2022-project2-group-14/app')
hc_b <- Hate_Crimes %>%
select(`Record Create Date`, `Bias Motive Description`, `Full Complaint ID`) %>%
group_by(`Record Create Date`, `Bias Motive Description`) %>%
summarise(count = length(`Full Complaint ID`)) %>%
arrange(desc(count))
head(Hate_Crimes)
head(hc_b)
subset(hc_b, `Bias Motive Description` == "ANTI-MALE HOMOSEXUAL (GAY)")
runApp('Desktop/Classes_Spring_22/APPLIED_DATA_SCIENCE/projects/project2/spring-2022-project2-group-14/app')
head(data2)
x = subset(hc_b, `Bias Motive Description` == "ANTI-MALE HOMOSEXUAL (GAY)")
head(x)
x$`Record Create Date`
runApp('Desktop/Classes_Spring_22/APPLIED_DATA_SCIENCE/projects/project2/spring-2022-project2-group-14/app')
as.Date(Hate_Crimes$`Record Create Date`, format = "%m/%d/%Y")
head(Hate_Crimes)
runApp('Desktop/Classes_Spring_22/APPLIED_DATA_SCIENCE/projects/project2/spring-2022-project2-group-14/app')
runApp('Desktop/Classes_Spring_22/APPLIED_DATA_SCIENCE/projects/project2/spring-2022-project2-group-14/app')
colnames(df1)
colnames(covid_19)
runApp('Desktop/Classes_Spring_22/APPLIED_DATA_SCIENCE/projects/project2/spring-2022-project2-group-14/app')
runApp('Desktop/Classes_Spring_22/APPLIED_DATA_SCIENCE/projects/project2/spring-2022-project2-group-14/app')
runApp('Desktop/Classes_Spring_22/APPLIED_DATA_SCIENCE/projects/project2/spring-2022-project2-group-14/app')
runApp('Desktop/Classes_Spring_22/APPLIED_DATA_SCIENCE/projects/project2/spring-2022-project2-group-14/app')
print(1)
print(1)
dir_path = '/Users/joelmugyenyi/Desktop/Classes_Spring_22/APPLIED_DATA_SCIENCE/projects/project2/spring-2022-project2-group-14/data/'
hate_crime_file_name ='NYPD_Hate_Crimes.csv'
hate_crime_file_path = paste(dir_path, hate_crime_file_name, sep="")
Hate_Crimes <- read.csv(hate_crime_file_path, check.names=FALSE)
pick_borough <- function(x){
if(x=='PATROL BORO BRONX') {
return ("BRONX")
}
else if (x=='PATROL BORO BKLYN SOUTH' || x=='PATROL BORO BKLYN NORTH'){
return ("BROOKLYN")
}
else if (x=='PATROL BORO MAN NORTH' || x=='PATROL BORO MAN SOUTH'){
return ("MANHATTAN")
}
else if (x=='PATROL BORO QUEENS NORTH' || x=='PATROL BORO QUEENS SOUTH'){
return ("QUEENS")
}
else if (x=='PATROL BORO STATEN ISLAND'){
return ("STATEN ISLAND")
}
else{
return(NULL)
}
}
Hate_Crimes["Borough Name"] = apply(Hate_Crimes["Patrol Borough Name"],1, pick_borough)
library("dplyr")
hc_1 = Hate_Crimes %>%
select("Borough Name", "Full Complaint ID") %>%
group_by(`Borough Name`) %>%
summarise(count = length(`Full Complaint ID`)) %>%
arrange(desc(count))
head(hc_1)
library(sf)
install.packages("tmap")
library(sf)
library(tmap)
install.packages("sf")
library(sf)
gdalinfo --version
gdalinfo --version
library(sf)
library(tmap)
library(sf)
dir_path = '/Users/joelmugyenyi/Desktop/Classes_Spring_22/APPLIED_DATA_SCIENCE/projects/project2/spring-2022-project2-group-14/data/Borough Boundaries/'
gis_boundaries = 'geo_export_1866a9a8-81ce-4f8a-ba22-a52396bd4885.shp'
file_path = paste(dir_path, gis_boundaries, sep="")
aoi_boundary_NYC <- st_read(file_path)
st_geometry_type(aoi_boundary_NYC)
library(ggplot2)
ggplot() +
geom_sf(data = aoi_boundary_NYC) +
ggtitle("AOI Boundary Plot") +
coord_sf()
names(hc_1)[names(hc_1) == 'Borough Name'] <- 'boro_name'
head(hc_1)
aoi_boundary_NYC$boro_code <- toupper(aoi_boundary_NYC$boro_code)
head(aoi_boundary_NYC)
aoi_boundary_NYC$boro_name = toupper(aoi_boundary_NYC$boro_name)
head(aoi_boundary_NYC)
merge(x = aoi_boundary_NYC, y = hc_1, by = "boro_name", all.x = TRUE)
df = merge(x = aoi_boundary_NYC, y = hc_1, by = "boro_name", all.x = TRUE)
library(tmap)
tm_shape(df) +
tm_polygons("count")
library(tmap)
tm_basemap("Stamen.Watercolor") +tm_shape(df) +
tm_polygons("count")
library(tmap)
tm_basemap("Stamen.Watercolor") +tm_shape(df) +
tm_polygons("count")
library(tmap)
library(tmaptools)
data(NLD_muni)
osm_NLD <- read_osm(NLD_muni, ext=1.1)
library(tmap)
library(tmaptools)
library(OpenStreetMap)
library(tmap)
library(tmaptools)
data(NLD_muni)
osm_NLD <- read_osm(NLD_muni, ext=1.1)
library(tmap)
library(tmaptools)
library(osmdata)
data(NLD_muni)
osm_NLD <- read_osm(NLD_muni, ext=1.1)
library(tmap)
library(tmaptools)
tm_shape(df) +
tm_polygons("count")
shiny::runApp('Desktop/Classes_Spring_22/APPLIED_DATA_SCIENCE/projects/project2/spring-2022-project2-group-14/app')
install.packages("shinydashboard")
runApp('Desktop/Classes_Spring_22/APPLIED_DATA_SCIENCE/projects/project2/spring-2022-project2-group-14/app')
runApp('Desktop/Classes_Spring_22/APPLIED_DATA_SCIENCE/projects/project2/spring-2022-project2-group-14/app')
install.packages("shinydashboard")
shiny::runApp()
runApp()
runApp()
library(tmap)
library(tmaptools)
tm_shape(df) +
tm_polygons("count")
library(tmap)
library(tmaptools)
tm_shape(df)
library(tmap)
library(tmaptools)
tm_shape(df) +
tm_polygons()
runApp()
head(hc_c)
head(Hate_Crimes)
runApp()
install.packages("shinydashboard")
shiny::runApp()
runApp()
install.packages("shinydashboard")
shiny::runApp()
runApp()
install.packages("shinydashboard")
shiny::runApp()
runApp()
install.packages("shinydashboard")
shiny::runApp()
x = st_read('https://drive.google.com/file/d/1MTkx2UxupYE_9KfIWUDS1Pld94rAQDBK/view?usp=sharing')
googlesheets4::gs4_deauth()
x = st_read('https://drive.google.com/file/d/1MTkx2UxupYE_9KfIWUDS1Pld94rAQDBK/view?usp=sharing')
googlesheets4::gs4_deauth()
temp <- tempfile(fileext = ".zip")
download.file("https://drive.google.com/file/d/1MTkx2UxupYE_9KfIWUDS1Pld94rAQDBK/view?usp=sharing",
temp)
x = st_read(temp)
library(sf)
dir_path = '/Users/joelmugyenyi/Desktop/Classes_Spring_22/APPLIED_DATA_SCIENCE/projects/project2/spring-2022-project2-group-14/data/Borough Boundaries/'
gis_boundaries = 'geo_export_1866a9a8-81ce-4f8a-ba22-a52396bd4885.shp'
file_path = paste(dir_path, gis_boundaries, sep="")
aoi_boundary_NYC <- st_read(file_path)
fil <- tempfile("/Users/joelmugyenyi/Desktop/Classes_Spring_22/APPLIED_DATA_SCIENCE/projects/project2/women", fileext = ".rds")
saveRDS(women, fil)
fil <- tempfile(file_path, fileext = ".rds")
saveRDS(women, fil)
#fil <- tempfile(file_path, fileext = ".rds")
saveRDS(aoi_boundary_NYC, file='/Users/joelmugyenyi/Desktop/Classes_Spring_22/APPLIED_DATA_SCIENCE/projects/project2/my_data.rds')
x = readRDS(file = "/Users/joelmugyenyi/Desktop/Classes_Spring_22/APPLIED_DATA_SCIENCE/projects/project2/my_data.rds")
head(x)
library(ggplot2)
ggplot() +
geom_sf(data = x) +
ggtitle("AOI Boundary Plot") +
coord_sf()
y = readRDS(file = "https://drive.google.com/file/d/13FVJecELtk_Y41b9iGtXt3kINMhkDpnf/view?usp=sharing")
y = readRDS(file = "https://drive.google.com/file/d/13FVJecELtk_Y41b9iGtXt3kINMhkDpnf/view?usp=sharing", open = 'rb')
y = readRDS(file = "https://drive.google.com/file/d/13FVJecELtk_Y41b9iGtXt3kINMhkDpnf/view?usp=sharing')
head(y)
y = readRDS(file = "https://drive.google.com/file/d/13FVJecELtk_Y41b9iGtXt3kINMhkDpnf/view?usp=sharing")
y = readRDS(url("https://drive.google.com/file/d/13FVJecELtk_Y41b9iGtXt3kINMhkDpnf/view?usp=sharing","rb"))
y = readRDS(url("https://doc-08-4k-docs.googleusercontent.com/docs/securesc/ugnki4k85vajjf3tavtppnf561guipj6/ijbi0670sohnngia39f4v284s337egd4/1645288500000/06817027942561654023/06817027942561654023/13FVJecELtk_Y41b9iGtXt3kINMhkDpnf?e=download&ax=ACxEAsa1MNzpliZMWcdgR4kSu9sW4WaoR11qZntmHsJh1oB4VD9cVuOlK41qa9ABbwzkj_6","rb"))
getwd()
library(sf)
dir_path = '../data/Borough Boundaries/'
gis_boundaries = 'geo_export_1866a9a8-81ce-4f8a-ba22-a52396bd4885.shp'
file_path = paste(dir_path, gis_boundaries, sep="")
aoi_boundary_NYC <- st_read(file_path)
runApp()
install.packages("shinydashboard")
shiny::runApp()
runApp()
install.packages("shinydashboard")
shiny::runApp()
library(tmap)
library(tmaptools)
tm_shape(df) +  tm_polygons("count", legend.title = "Hate Crime Count")
library(sf)
dir_path = '../data/Borough Boundaries/'
gis_boundaries = 'geo_export_1866a9a8-81ce-4f8a-ba22-a52396bd4885.shp'
file_path = paste(dir_path, gis_boundaries, sep="")
aoi_boundary_NYC <- st_read(file_path)
library(tmap)
library(tmaptools)
tm_shape(df) +  tm_polygons("count", legend.title = "Hate Crime Count")
runApp()
install.packages("shinydashboard")
shiny::runApp()
runApp()
shiny::runApp()
runApp()
install.packages("shinydashboard")
shiny::runApp()
runApp()
runApp()
install.packages("shinydashboard")
shiny::runApp()
runApp()
install.packages("shinydashboard")
shiny::runApp()
runApp()
install.packages("shinydashboard")
shiny::runApp()
runApp()
install.packages("shinydashboard")
shiny::runApp()
x =1
print(x)
runApp()
install.packages("shinydashboard")
shiny::runApp()
library(rsconnect)
rsconnect::setAccountInfo(name='jmugyenyi', token='A54E7C148B99F9C83FA859553DEDADF8', secret='tXNZXW8RehCr93QP2uJkQnOul84Fmg70rDMWEOHJ')
runApp()
install.packages("shinydashboard")
shiny::runApp()
