as.Date(Hate_Crimes$`Record Create Date`, format = "%m/%d/%Y")
head(Hate_Crimes)
runApp('Desktop/Classes_Spring_22/APPLIED_DATA_SCIENCE/projects/project2/spring-2022-project2-group-14/app')
runApp('Desktop/Classes_Spring_22/APPLIED_DATA_SCIENCE/projects/project2/spring-2022-project2-group-14/app')
colnames(df1)
colnames(covid_19)
runApp('Desktop/Classes_Spring_22/APPLIED_DATA_SCIENCE/projects/project2/spring-2022-project2-group-14/app')
runApp('Desktop/Classes_Spring_22/APPLIED_DATA_SCIENCE/projects/project2/spring-2022-project2-group-14/app')
runApp('Desktop/Classes_Spring_22/APPLIED_DATA_SCIENCE/projects/project2/spring-2022-project2-group-14/app')
runApp('Desktop/Classes_Spring_22/APPLIED_DATA_SCIENCE/projects/project2/spring-2022-project2-group-14/app')
shiny::runApp('Desktop/Classes_Spring_22/APPLIED_DATA_SCIENCE/projects/project2/spring-2022-project2-group-14/app')
runApp('Desktop/Classes_Spring_22/APPLIED_DATA_SCIENCE/projects/project2/spring-2022-project2-group-14/app')
shiny::runApp('Desktop/Classes_Spring_22/APPLIED_DATA_SCIENCE/projects/project2/spring-2022-project2-group-14/app')
shiny::runApp('Desktop/Classes_Spring_22/APPLIED_DATA_SCIENCE/projects/project2/spring-2022-project2-group-14/app')
runApp('Desktop/Classes_Spring_22/APPLIED_DATA_SCIENCE/projects/project2/spring-2022-project2-group-14/app')
install.packages("shinydashboard")
shiny::runApp()
library(sf)
dir_path = '../data/Borough Boundaries/'
gis_boundaries = 'geo_export_1866a9a8-81ce-4f8a-ba22-a52396bd4885.shp'
file_path = paste(dir_path, gis_boundaries, sep="")
aoi_boundary_NYC <- st_read(file_path)
library(sf)
dir_path = '/Users/joelmugyenyi/Desktop/Classes_Spring_22/APPLIED_DATA_SCIENCE/projects/project2/spring-2022-project2-group-14/data/Borough Boundaries/'
gis_boundaries = 'geo_export_1866a9a8-81ce-4f8a-ba22-a52396bd4885.shp'
file_path = paste(dir_path, gis_boundaries, sep="")
aoi_boundary_NYC <- st_read(file_path)
dir_path = '/Users/joelmugyenyi/Desktop/Classes_Spring_22/APPLIED_DATA_SCIENCE/projects/project2/spring-2022-project2-group-14/data/'
hate_crime_file_name ='NYPD_Hate_Crimes.csv'
hate_crime_file_path = paste(dir_path, hate_crime_file_name, sep="")
Hate_Crimes <- read.csv(hate_crime_file_path, check.names=FALSE)
pick_borough <- function(x){
if(x=='PATROL BORO BRONX') {
return ("BRONX")
}
else if (x=='PATROL BORO BKLYN SOUTH' || x=='PATROL BORO BKLYN NORTH'){
return ("BROOKLYN")
}
else if (x=='PATROL BORO MAN NORTH' || x=='PATROL BORO MAN SOUTH'){
return ("MANHATTAN")
}
else if (x=='PATROL BORO QUEENS NORTH' || x=='PATROL BORO QUEENS SOUTH'){
return ("QUEENS")
}
else if (x=='PATROL BORO STATEN ISLAND'){
return ("STATEN ISLAND")
}
else{
return(NULL)
}
}
Hate_Crimes["Borough Name"] = apply(Hate_Crimes["Patrol Borough Name"],1, pick_borough)
library("dplyr")
hc_1 = Hate_Crimes %>%
select("Borough Name", "Full Complaint ID") %>%
group_by(`Borough Name`) %>%
summarise(count = length(`Full Complaint ID`)) %>%
arrange(desc(count))
head(hc_1)
head(Hate_Crimes)
head(Hate_Crimes)
dir_path = '/Users/joelmugyenyi/Desktop/Classes_Spring_22/APPLIED_DATA_SCIENCE/projects/project2/spring-2022-project2-group-14/data/'
hate_crime_file_name ='NYPD_Hate_Crimes.csv'
hate_crime_file_path = paste(dir_path, hate_crime_file_name, sep="")
Hate_Crimes <- read.csv(hate_crime_file_path, check.names=FALSE)
pick_borough <- function(x){
if(x=='PATROL BORO BRONX') {
return ("BRONX")
}
else if (x=='PATROL BORO BKLYN SOUTH' || x=='PATROL BORO BKLYN NORTH'){
return ("BROOKLYN")
}
else if (x=='PATROL BORO MAN NORTH' || x=='PATROL BORO MAN SOUTH'){
return ("MANHATTAN")
}
else if (x=='PATROL BORO QUEENS NORTH' || x=='PATROL BORO QUEENS SOUTH'){
return ("QUEENS")
}
else if (x=='PATROL BORO STATEN ISLAND'){
return ("STATEN ISLAND")
}
else{
return(NULL)
}
}
Hate_Crimes["Borough Name"] = apply(Hate_Crimes["Patrol Borough Name"],1, pick_borough)
Hate_Crimes$`Record Create Date` <- as.Date(Hate_Crimes$`Record Create Date`, format = "%m/%d/%Y")
library("dplyr")
hc_1 = Hate_Crimes %>%
select("Borough Name", "Full Complaint ID") %>%
group_by(`Borough Name`) %>%
summarise(count = length(`Full Complaint ID`)) %>%
arrange(desc(count))
head(hc_1)
head(Hate_Crimes)
library(tmap)
library(tmaptools)
tm_shape(df) +  tm_polygons("count", legend.title = "Hate Crime Count")
df = merge(x = aoi_boundary_NYC, y = hc_1, by = "boro_name", all.x = TRUE)
aoi_boundary_NYC$boro_name = toupper(aoi_boundary_NYC$boro_name)
head(aoi_boundary_NYC)
df = merge(x = aoi_boundary_NYC, y = hc_1, by = "boro_name", all.x = TRUE)
names(hc_1)[names(hc_1) == 'Borough Name'] <- 'boro_name'
head(hc_1)
df = merge(x = aoi_boundary_NYC, y = hc_1, by = "boro_name", all.x = TRUE)
library(tmap)
library(tmaptools)
tm_shape(df) +  tm_polygons("count", legend.title = "Hate Crime Count")
library(tmap)
library(tmaptools)
tm_shape(df) +  tm_polygons("count", legend.title = "Hate Crime Count")+ tm_legend(show = TRUE)
library(tmap)
library(tmaptools)
tm_shape(df) +  tm_polygons("count", legend.title = "Hate Crime Count")+ tm_legend(show = TRUE)+tm_fill(title = "GDP")
library(tmap)
library(tmaptools)
tm_shape(df) +  tm_polygons("count", legend.title = "Hate Crime Count")+ tm_legend(show = TRUE)+tm_add_legend(title="Population Estimate")
library(tmap)
library(tmaptools)
tm_shape(df) +  tm_polygons("count", legend.title = "Hate Crime Count")+ tm_legend(show = FALSE)+tm_add_legend(title="Population Estimate")
library(tmap)
library(tmaptools)
tm_shape(df) +  tm_polygons( legend.title = "Hate Crime Count")+ tm_legend(show = FALSE)+tm_add_legend(title="Population Estimate")
library(tmap)
library(tmaptools)
tm_shape(df) +  tm_polygons("count", legend.title = "Hate Crime Count")+ tm_legend(show = FALSE)+tm_add_legend(title="Population Estimate")
library(tmap)
library(tmaptools)
tm_shape(df) +  tm_polygons("count", legend.title = "Hate Crime Count")+ tm_legend(show = TRUE)+tm_add_legend(title="Population Estimate")
library(tmap)
library(tmaptools)
tm_shape(df) +  tm_polygons("count", legend.title = "Hate Crime Count")+ tm_legend(show = TRUE)+tm_add_legend(title="Hate Crime Occurences")
library(ggplot2)
library(plotly)
library(gapminder)
library(ggplot2)
library(plotly)
library(gapminder)
install.packages('gapminder')
library(ggplot2)
library(plotly)
library(gapminder)
p <- gapminder %>%
filter(year==1977) %>%
ggplot( aes(gdpPercap, lifeExp, size = pop, color=continent)) +
geom_point() +
theme_bw()
ggplotly(p)
library(tmap)
library(tmaptools)
tmap_mode("view")
tm_shape(df) +  tm_polygons("count", legend.title = "Hate Crime Count")+ tm_legend(show = TRUE)+tm_add_legend(title="Hate Crime Occurences")
library(tmap)
library(tmaptools)
tmap_mode("view")
tm_shape(df) +  tm_polygons("count", legend.title = "Hate Crime Count")+ tm_legend(show = TRUE)+tm_add_legend(title="Hate Crime Occurences")
library(tmap)
library(tmaptools)
#tmap_mode("view")
tm_shape(df) +  tm_polygons("count", legend.title = "Hate Crime Count")+ tm_legend(show = TRUE)+tm_add_legend(title="Hate Crime Occurences")
df = merge(x = aoi_boundary_NYC, y = hc_1, by = "boro_name", all.x = TRUE)
library(tmap)
library(tmaptools)
#tmap_mode("view")
tm_shape(df) +  tm_polygons("count", legend.title = "Hate Crime Count")+ tm_legend(show = TRUE)+tm_add_legend(title="Hate Crime Occurences")
head(df)
library(tmap)
library(tmaptools)
#tmap_mode("view")
tm_shape(df) +  tm_polygons("count", legend.title = "Hate Crime Count")+ tm_legend(show = TRUE)+tm_add_legend(title="Hate Crime Occurences")
library(ggplot2)
ggplot() +
geom_sf(data = x) +
ggtitle("AOI Boundary Plot") +
coord_sf()
library(sf)
dir_path = '/Users/joelmugyenyi/Desktop/Classes_Spring_22/APPLIED_DATA_SCIENCE/projects/project2/spring-2022-project2-group-14/data/Borough Boundaries/'
gis_boundaries = 'geo_export_1866a9a8-81ce-4f8a-ba22-a52396bd4885.shp'
file_path = paste(dir_path, gis_boundaries, sep="")
aoi_boundary_NYC <- st_read(file_path)
getwd()
library(ggplot2)
ggplot() +
geom_sf(data = aoi_boundary_NYC) +
ggtitle("AOI Boundary Plot") +
coord_sf()
head(aoi_boundary_NYC)
dir_path = '/Users/joelmugyenyi/Desktop/Classes_Spring_22/APPLIED_DATA_SCIENCE/projects/project2/spring-2022-project2-group-14/data/'
hate_crime_file_name ='NYPD_Hate_Crimes.csv'
hate_crime_file_path = paste(dir_path, hate_crime_file_name, sep="")
Hate_Crimes <- read.csv(hate_crime_file_path, check.names=FALSE)
pick_borough <- function(x){
if(x=='PATROL BORO BRONX') {
return ("BRONX")
}
else if (x=='PATROL BORO BKLYN SOUTH' || x=='PATROL BORO BKLYN NORTH'){
return ("BROOKLYN")
}
else if (x=='PATROL BORO MAN NORTH' || x=='PATROL BORO MAN SOUTH'){
return ("MANHATTAN")
}
else if (x=='PATROL BORO QUEENS NORTH' || x=='PATROL BORO QUEENS SOUTH'){
return ("QUEENS")
}
else if (x=='PATROL BORO STATEN ISLAND'){
return ("STATEN ISLAND")
}
else{
return(NULL)
}
}
Hate_Crimes["Borough Name"] = apply(Hate_Crimes["Patrol Borough Name"],1, pick_borough)
Hate_Crimes$`Record Create Date` <- as.Date(Hate_Crimes$`Record Create Date`, format = "%m/%d/%Y")
library("dplyr")
hc_1 = Hate_Crimes %>%
select("Borough Name", "Full Complaint ID") %>%
group_by(`Borough Name`) %>%
summarise(count = length(`Full Complaint ID`)) %>%
arrange(desc(count))
head(hc_1)
names(hc_1)[names(hc_1) == 'Borough Name'] <- 'boro_name'
head(hc_1)
aoi_boundary_NYC$boro_name = toupper(aoi_boundary_NYC$boro_name)
head(aoi_boundary_NYC)
df = merge(x = aoi_boundary_NYC, y = hc_1, by = "boro_name", all.x = TRUE)
head(df)
library(tmap)
library(tmaptools)
#tmap_mode("view")
tm_shape(df) +  tm_polygons("count", legend.title = "Hate Crime Count")+ tm_legend(show = TRUE)+tm_add_legend(title="Hate Crime Occurences")
library(tmap)
library(tmaptools)
#tmap_mode("view")
tm_shape(df)
library(tmap)
tm_shape(df)
library(tmap)
tm_shape(df)
library(tmap)
tm_shape(aoi_boundary_NYC)
library(tmap)
tm_shape(aoi_boundary_NYC)+  tm_polygons()
library(tmap)
tm_shape(df)+  tm_polygons()
library(tmap)
tm_shape(df)+  tm_polygons("count")
runApp()
install.packages("shinydashboard")
shiny::runApp()
library(tmap)
tm_shape(df)+  tm_polygons("count", legend.title = "Hate Crime Count")+ tm_legend(show = TRUE)+tm_add_legend(title="Hate Crime Occurences")
library(tmap)
tm_shape(df)+  tm_polygons("count", legend.title = "Hate Crime Count")+ tm_legend(show = TRUE)
Hate_Crimes[Hate_Crimes['Record Create Date']<='2020-02-02']
#Hate_Crimes[Hate_Crimes['Record Create Date']<='2020-02-02']
Hate_Crimes%>%
filter('Record Create Date' <= "'2020-02-02")
#Hate_Crimes[Hate_Crimes['Record Create Date']<='2020-02-02']
Hate_Crimes%>%
filter('Record Create Date' <= "2020-02-02")
#Hate_Crimes[Hate_Crimes['Record Create Date']<='2020-02-02']
Hate_Crimes%>%
filter(`Record Create Date` <= "2020-02-02")
#Hate_Crimes[Hate_Crimes['Record Create Date']<='2020-02-02']
hc_pre_covid = Hate_Crimes%>%filter(`Record Create Date` <= "2020-02-02")
hc_since_covid = Hate_Crimes%>%filter(`Record Create Date` > "2020-02-02")
library("dplyr")
hc_1 = hc_pre_covid %>%
select("Borough Name", "Full Complaint ID") %>%
group_by(`Borough Name`) %>%
summarise(count = length(`Full Complaint ID`)) %>%
arrange(desc(count))
#Hate_Crimes[Hate_Crimes['Record Create Date']<='2020-02-02']
hc_pre_covid = Hate_Crimes%>%filter(`Record Create Date` <= "2020-02-02")
hc_since_covid = Hate_Crimes%>%filter(`Record Create Date` > "2020-02-02")
head(hc_since_covid)
library("dplyr")
hc_1 = hc_pre_covid %>%
select("boro_name", "Full Complaint ID") %>%
group_by(`boro_name`) %>%
summarise(count = length(`Full Complaint ID`)) %>%
arrange(desc(count))
head(hc_1)
aoi_boundary_NYC$boro_name = toupper(aoi_boundary_NYC$boro_name)
head(aoi_boundary_NYC)
df = merge(x = aoi_boundary_NYC, y = hc_1, by = "boro_name", all.x = TRUE)
library(tmap)
tm_shape(df)+  tm_polygons("count", legend.title = "Hate Crime Count")+ tm_legend(show = TRUE)
runApp()
install.packages("shinydashboard")
shiny::runApp()
runApp()
install.packages("shinydashboard")
shiny::runApp()
runApp()
install.packages("shinydashboard")
shiny::runApp()
runApp()
install.packages("shinydashboard")
shiny::runApp()
runApp()
install.packages("shinydashboard")
shiny::runApp()
library("tidyverse")
library("tidyverse")
install.packages('tidyverse')
library("dplyr")
library("tidyverse")
library("leaflet")
library("readr")
library("ggplot2")
library("dplyr")
library("plotly")
library("gtable")
library("lubridate")
# dataset
Hate_Crimes <- read_csv("/Users/zengshanyue/Desktop/5243/Project/Project2/dataset/NYPD_Hate_Crimes.csv")
COVID_Daily_Cases <- read_csv("/Users/zengshanyue/Desktop/5243/Project/Project2/dataset/COVID-19_Daily_Counts_of_Cases__Hospitalizations__and_Deaths.csv")
COVID_Daily_Cases$DATE_OF_INTEREST <- as.Date(COVID_Daily_Cases$DATE_OF_INTEREST, format = "%m/%d/%Y")
COVID_Whole_Cases <- COVID_Daily_Cases %>%
select(DATE_OF_INTEREST, CASE_COUNT, HOSPITALIZED_COUNT, DEATH_COUNT, CASE_COUNT_7DAY_AVG) %>%
filter(DATE_OF_INTEREST >= "2020-02-29" & DATE_OF_INTEREST <= "2021-12-29")
COVID_Cases_Month <- COVID_Whole_Cases %>%
mutate(Month = paste(year(DATE_OF_INTEREST),sprintf("%02d",month(DATE_OF_INTEREST)),sep="-")) %>%
group_by(Month) %>%
summarise(month_case = sum(CASE_COUNT))
Hate_Crimes$`Record Create Date` <- as.Date(Hate_Crimes$`Record Create Date`, format = "%m/%d/%Y")
Hate_Crimes_Cases <- Hate_Crimes %>%
select(`Full Complaint ID`, `Record Create Date`, `Patrol Borough Name`, `County`,
`Law Code Category Description`,`Bias Motive Description`, `Offense Category`) %>%
filter(`Record Create Date` >= "2020-02-29" & `Record Create Date` <= "2021-12-29")
Hate_Crimes_Cases_Day <- Hate_Crimes_Cases %>%
select(`Full Complaint ID`, `Record Create Date`) %>%
group_by(`Record Create Date`) %>%
summarise(count = n_distinct(`Full Complaint ID`))
Hate_Crimes_Month <- Hate_Crimes %>%
select(`Complaint Year Number`,`Month Number`,`Full Complaint ID`) %>%
mutate(Month = paste(`Complaint Year Number`,`Month Number`),sep="-") %>%
group_by(Month) %>%
summarise(Case = n_distinct(`Full Complaint ID`))
data = Hate_Crimes %>%
select(`Full Complaint ID`, `Record Create Date`)  %>%
count(date = format(as.Date(`Record Create Date`, format = "%m/%d/%Y"), "%Y/%m")) %>%
mutate(date = paste(date,"/01", sep = ""))
h1 <- data %>%
ggplot(aes(as.Date(date), n)) +
geom_line() +
geom_point() +
xlab("Date") +
ylab("Cases") +
labs(title="Crime Cases By Month") +
theme(plot.title=element_text(size=20, face="bold", hjust=0.5, lineheight=1.2)) +
theme_bw()
mytext <- paste("Date: ", data$date, "\n",
"Number of Crime Cases: ", data$n,  sep="")
pp <- plotly_build(h1)
style(pp, text=mytext, hoverinfo = "text")
data = Hate_Crimes[Hate_Crimes$`Bias Motive Description` == "ANTI-JEWISH", ] %>%
select(`Full Complaint ID`, `Record Create Date`)  %>%
count(date = format(as.Date(`Record Create Date`, format = "%m/%d/%Y"), "%Y/%m")) %>%
mutate(date = paste(date,"/01", sep = ""))
h1 <- data %>%
ggplot(aes(as.Date(date), n)) +
geom_line() +
geom_point() +
xlab("Date") +
ylab("Cases") +
labs(title="Crime Cases By Month") +
theme(plot.title=element_text(size=20, face="bold", hjust=0.5, lineheight=1.2)) +
theme_bw()
mytext <- paste("Date: ", data$date, "\n",
"Number of Crime Cases: ", data$n,  sep="")
pp <- plotly_build(h1)
style(pp, text=mytext, hoverinfo = "text")
data = Hate_Crimes[Hate_Crimes$`Bias Motive Description` == "ANTI-ASIAN", ] %>%
select(`Full Complaint ID`, `Record Create Date`)  %>%
count(date = format(as.Date(`Record Create Date`, format = "%m/%d/%Y"), "%Y/%m")) %>%
mutate(date = paste(date,"/01", sep = ""))
h1 <- data %>%
ggplot(aes(as.Date(date), n)) +
geom_line() +
geom_point() +
xlab("Date") +
ylab("Cases") +
labs(title="Crime Cases By Month") +
theme(plot.title=element_text(size=20, face="bold", hjust=0.5, lineheight=1.2)) +
theme_bw()
mytext <- paste("Date: ", data$date, "\n",
"Number of Crime Cases: ", data$n,  sep="")
pp <- plotly_build(h1)
style(pp, text=mytext, hoverinfo = "text")
h1 <- Hate_Crimes %>%
select(`Record Create Date`, `Full Complaint ID`) %>%
group_by(`Record Create Date`) %>%
summarise(count = length(`Full Complaint ID`)) %>%
ggplot(aes(`Record Create Date`, count)) +
geom_line(color="#69b3a2") +
xlab("Date") +
ylab("Hate Crime Cases Count") +
theme_bw()
ggplotly(h1)
COVID_Cases_Month <- COVID_Daily_Cases %>%
select(CASE_COUNT, DATE_OF_INTEREST) %>%
mutate(date = format(as.Date(DATE_OF_INTEREST, format = "%m/%d/%Y"), "%Y/%m")) %>%
mutate(date = paste(date,"/01", sep = "")) %>%
group_by(date) %>%
summarise(n = sum(CASE_COUNT))
c1 <- COVID_Cases_Month %>%
ggplot(aes(as.Date(date), n)) +
geom_line() +
geom_point() +
xlab("Date") +
ylab("Cases") +
labs(title="COVID Cases By Month") +
theme(plot.title=element_text(size=20, face="bold", hjust=0.5, lineheight=1.2)) +
theme_bw()
mytext <- paste("Date: ", data$date, "\n",
"Number of COVID Cases: ", COVID_Cases_Month$n,  sep="")
pp <- plotly_build(c1)
style(pp, text=mytext, hoverinfo = "text")
c1 <- COVID_Daily_Cases %>%
ggplot(aes(DATE_OF_INTEREST, CASE_COUNT)) +
geom_line(color="#69b3a2") +
xlab("Date") +
ylab("COVID Cases Count") +
theme_bw()
mytext <- paste("Date: ", COVID_Daily_Cases$DATE_OF_INTEREST, "\n",
"Number of COVID Cases: ", COVID_Daily_Cases$CASE_COUNT,  sep="")
pp <- plotly_build(c1)
style(pp, text=mytext, hoverinfo = "text")
linechart <- function(data1, data2){
p <- ggplot(data1,aes(x=DATE_OF_INTEREST,y=CASE_COUNT))+
geom_line(color="blue") +
xlab("Date") +
ylab("COVID Cases Count") +
theme_bw()
p1 <- p +
ylim(0,50000)+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank(),
panel.background=element_blank(),
legend.position="top")
p2_1 <- ggplot(data2, aes(x = `Record Create Date`, y = count)) +
geom_line(color="#69b3a2")
p2 <- p2_1+
ylim(1,max(data2$count))+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank(),
panel.background=element_blank(),
axis.text.x=element_blank(),
axis.title.x =element_blank(),
axis.title.y =element_blank())%+replace%
theme(panel.background = element_rect(fill = NA))
# gtable
g1 <- ggplot_gtable(ggplot_build(p1))
g2 <- ggplot_gtable(ggplot_build(p2))
# overlap
pp <- c(subset(g1$layout, name == "panel", se = t:r))
g <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]],
pp$t,pp$l, pp$b, pp$l)
grid.newpage()
#axis tweaks
ia <- which(g2$layout$name == "axis-l")
ga <- g2$grobs[[ia]]
ax <- ga$children[[2]]
ax$widths <- rev(ax$widths)
ax$grobs <- rev(ax$grobs)
ax$grobs[[1]]$x <- ax$grobs[[1]]$x - unit(1, "npc") + unit(0.15, "cm")
g <- gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths))
g <- gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b)
grid.newpage()
grid.draw(g)
}
hc_b <- Hate_Crimes %>%
select(`Record Create Date`, `Bias Motive Description`, `Full Complaint ID`) %>%
group_by(`Record Create Date`, `Bias Motive Description`) %>%
summarise(count = length(`Full Complaint ID`)) %>%
arrange(desc(count))
linechart(COVID_Daily_Cases, subset(hc_b, `Bias Motive Description` == "ANTI-MALE HOMOSEXUAL (GAY)"))
ggplot() +
geom_line(data = COVID_Whole_Cases, aes(x = DATE_OF_INTEREST, y = CASE_COUNT,color="COVID")) +
geom_line(data = Hate_Crimes_Cases_Day, aes(x=`Record Create Date`, y=(count-1)*5000, color="Crime")) +
scale_y_continuous(name = "COVID Cases (per day)", sec.axis = sec_axis(~./5000+1, name = "Crime Cases (per day)")) +
xlab("Date") +
theme(axis.title.y = element_text(color = "red", size = 12),
axis.title.y.right = element_text(color = "#39c3c2", size = 12)) +
ggtitle("COVID Cases vs Crime Cases")
# Combination function
combine <- function(data1,category){
data2 <- Hate_Crimes[Hate_Crimes$`Bias Motive Description` == category, ] %>%
select(`Full Complaint ID`, `Record Create Date`) %>%
group_by(`Record Create Date`) %>%
summarise(count = n_distinct(`Full Complaint ID`))
ggplot() +
geom_line(data = data1, aes(x = DATE_OF_INTEREST, y = CASE_COUNT, color="COVID")) +
geom_line(data = data2, aes(x=`Record Create Date`, y=(count-1)*10000, color="Crime")) +
scale_y_continuous(name = "COVID Cases (per day)", sec.axis = sec_axis(~./10000+1, name = "Crime Cases")) +
xlab("Date") +
theme(axis.title.y = element_text(color = "red", size = 12),
axis.title.y.right = element_text(color = "#39c3c2", size = 12)) +
ggtitle("COVID Cases vs Crime Cases")
}
combine(COVID_Whole_Cases,"ANTI-ASIAN")
combine(COVID_Whole_Cases,"ANTI-MALE HOMOSEXUAL (GAY)")
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
